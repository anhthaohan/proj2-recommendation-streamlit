# pages/recommendation.py
import streamlit as st
import pandas as pd
import joblib
import os
import math

# ====== Load m√¥ h√¨nh & d·ªØ li·ªáu ======
@st.cache_resource
def load_cb_model():
    path = "models/content_based_model_top1000.pkl"
    if not os.path.exists(path):
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y file content_based_model_top1000.pkl")
        st.stop()
    return joblib.load(path)

@st.cache_resource
def load_cf_model():
    path = "models/collaborative_model_svd.pkl"
    if not os.path.exists(path):
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y file collaborative_model_svd.pkl")
        st.stop()
    return joblib.load(path)

@st.cache_data
def load_products():
    return pd.read_csv("data/Products_ThoiTrangNam_clean.csv")

@st.cache_data
def load_ratings():
    return pd.read_csv("data/Products_ThoiTrangNam_rating_clean.csv", sep="\t")

# ====== Hi·ªÉn th·ªã s·∫£n ph·∫©m g·ª£i √Ω ======
def display_recommendations(result_df, is_cb=True):
    if result_df.empty:
        st.warning("üôÅ Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.")
    else:
        for _, row in result_df.iterrows():
            with st.container():
                cols = st.columns([1, 4])
                with cols[0]:
                    image_url = row.get("image", "")
                    if isinstance(image_url, str) and image_url.startswith("http"):
                        st.image(image_url, width=120)
                    else:
                        st.image("images/no_image.jpg", width=120)

                with cols[1]:
                    mota = str(row['M√¥ t·∫£'])
                    short_desc = mota[:200] + "..." if len(mota) > 200 else mota

                    st.markdown(f"""
                    **üß¢ T√™n s·∫£n ph·∫©m:** {row['T√™n s·∫£n ph·∫©m']}  
                    **üì¶ Lo·∫°i s·∫£n ph·∫©m:** {row['Lo·∫°i s·∫£n ph·∫©m']}  
                    **üí∏ Gi√°:** {int(row['Gi√°']):,}‚Ç´  
                    **‚≠ê ƒê√°nh gi√°:** {float(row['ƒê√°nh gi√°']):.1f}  
                    **üìñ M√¥ t·∫£:** {short_desc}
                    """)

                    if is_cb and 'ƒê·ªô t∆∞∆°ng ƒë·ªìng' in row:
                        st.markdown(f"üìä **ƒê·ªô t∆∞∆°ng ƒë·ªìng:** {float(row['ƒê·ªô t∆∞∆°ng ƒë·ªìng']):.3f}")
                    elif not is_cb and 'D·ª± ƒëo√°n' in row and float(row['D·ª± ƒëo√°n']) > 0:
                        st.markdown(f"üìä **D·ª± ƒëo√°n:** {float(row['D·ª± ƒëo√°n']):.1f}")

                st.markdown("---")

# ====== Giao di·ªán ch√≠nh g·ª£i √Ω ======
def product_recommendation():
    st.header("üéØ H·ªá th·ªëng g·ª£i √Ω s·∫£n ph·∫©m")

    method = st.selectbox("üîç Ch·ªçn ph∆∞∆°ng ph√°p g·ª£i √Ω:", ["G·ª£i √Ω theo n·ªôi dung", "G·ª£i √Ω theo ng∆∞·ªùi d√πng"])
    products_df = load_products()

    if method == "G·ª£i √Ω theo n·ªôi dung":
        model_cb = load_cb_model()

        search_mode = st.radio("Ch·ªçn c√°ch t√¨m ki·∫øm:", ["T·ª´ kh√≥a", "M√£ s·∫£n ph·∫©m"])
        if search_mode == "T·ª´ kh√≥a":
            keyword = st.text_input("Nh·∫≠p t·ª´ kh√≥a (v√≠ d·ª•: √°o thun)")
            if st.button("G·ª£i √Ω", key="btn_cb_keyword"):
                result = model_cb.search_and_recommend(keyword, top_k=10)
                display_recommendations(result, is_cb=True)

        elif search_mode == "M√£ s·∫£n ph·∫©m":
            unique_ids = products_df["product_id"].dropna().unique()
            product_id = st.selectbox("Ch·ªçn m√£ s·∫£n ph·∫©m:", unique_ids)

            if st.button("G·ª£i √Ω", key="btn_cb_product"):
                try:
                    result = model_cb.recommend_by_product_id(product_id, top_k=10)
                    display_recommendations(result, is_cb=True)
                except Exception as e:
                    st.error(f"L·ªói: {e}")

    elif method == "G·ª£i √Ω theo ng∆∞·ªùi d√πng":
        from utils.collaborative import get_top_n_recommendations
        model_cf = load_cf_model()
        ratings_df = load_ratings()

        user_map_df = ratings_df[['user_id', 'user']].drop_duplicates()
        user_map = dict(zip(user_map_df['user_id'], user_map_df['user']))

        st.subheader("üë• Danh s√°ch ng∆∞·ªùi d√πng v√† m√£ ID")
        st.dataframe(user_map_df.reset_index(drop=True), use_container_width=True)

        user_ids = sorted(user_map.keys())
        selected_user = st.selectbox("Ch·ªçn User ID:", user_ids)

        if selected_user:
            user_name = user_map.get(selected_user, "Kh√¥ng x√°c ƒë·ªãnh")
            st.markdown(f"üë§ **T√™n ng∆∞·ªùi d√πng:** `{user_name}`")

        st.subheader("üõçÔ∏è S·∫£n ph·∫©m ƒë√£ ƒë√°nh gi√°:")
        user_rated_df = ratings_df[ratings_df['user_id'] == selected_user]
        rated_products = products_df[products_df['product_id'].isin(user_rated_df['product_id'])].copy()
        rated_products.rename(columns={
            'product_id': 'M√£ SP',
            'product_name': 'T√™n s·∫£n ph·∫©m',
            'sub_category': 'Lo·∫°i s·∫£n ph·∫©m',
            'price': 'Gi√°',
            'rating': 'ƒê√°nh gi√°',
            'description': 'M√¥ t·∫£'
        }, inplace=True)
        display_recommendations(rated_products, is_cb=False)

        if st.button("G·ª£i √Ω", key="btn_cf_user"):
            try:
                result = get_top_n_recommendations(
                    user_id=selected_user,
                    model=model_cf,
                    product_df=products_df,
                    ratings_df=ratings_df,
                    n=10
                )
                st.subheader("üéÅ G·ª£i √Ω s·∫£n ph·∫©m d·ª±a tr√™n h√†nh vi ng∆∞·ªùi d√πng:")
                display_recommendations(result, is_cb=False)
            except Exception as e:
                st.error(f"L·ªói khi g·ª£i √Ω: {e}")
